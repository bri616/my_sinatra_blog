<h1>BeerXML and rspec</h1>
<time datetime="2014-09-28 13:00">28 September 2014, 1300</time>

<p>
  Ada week 4 has just come to a close, and my programming thoughts lately often turn
  to homebrew and beer-related topics. For example, during week 2 one of our projects
  involved learning the basics of object-oriented programming by writing a class
  to handle the sorts of objects we might find in a Solar System. Mine ended up
  being filled with planets and moons named after hop varieties. (You can check it
  out <a href="https://github.com/brigid2718/SolarSystem">here</a>, if you like.)
</p>
<p>
  Somehow, this weekend I decided I wanted to check out this whole BeerXML thing that
  my homebrew friends often mention. It turns out BeerXML is sort of a standard for
  describing beer-related information (such as recipes) and hopes to become something
  universally used so that different software packages and applications can easily
  understand data from eachother. (I mostly use BeerSmith, and it looks like the creator
  of BS is one of the creators/contributors to BeerXML.)
</p>
<p>
  Here's a sample of some BeerXML:
  <xml>
    <pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?>
&lt;!-- BeerXML Format - Generated by BeerSmith  - see www.beersmith.com -->
&lt;RECIPES>
&lt;RECIPE>
 &lt;NAME>Burton Ale&lt;/NAME>
 &lt;VERSION>1&lt;/VERSION>
 &lt;TYPE>All Grain&lt;/TYPE>
 &lt;BREWER>Brad Smith&lt;/BREWER>
 &lt;ASST_BREWER>&lt;/ASST_BREWER>
 &lt;BATCH_SIZE>18.92716800&lt;/BATCH_SIZE>
 &lt;BOIL_SIZE>20.81988500&lt;/BOIL_SIZE>
 &lt;BOIL_TIME>60&lt;/BOIL_TIME>
 &lt;EFFICIENCY>72.0&lt;/EFFICIENCY>
 &lt;HOPS>
&lt;HOP>
 &lt;NAME>Goldings, East Kent&lt;/NAME>
 &lt;VERSION>1&lt;/VERSION>
 &lt;ORIGIN>United Kingdom&lt;/ORIGIN>
 &lt;ALPHA>5.50&lt;/ALPHA>
 &lt;AMOUNT>0.0283500&lt;/AMOUNT>
 &lt;USE>Boil&lt;/USE>
 &lt;TIME>60.000&lt;/TIME>
 &lt;NOTES>Used For: General purpose hops for bittering/finishing all British Ales
Aroma: Floral, aromatic, earthy, slightly sweet spicy flavor
Substitutes: Fuggles, BC Goldings
Examples: Bass Pale Ale, Fullers ESB, Samual Smith&apos;s Pale Ale
&lt;/NOTES>
 &lt;TYPE>Aroma&lt;/TYPE>
 &lt;FORM>Pellet&lt;/FORM>
 &lt;BETA>3.50&lt;/BETA>
 &lt;HSI>35.0&lt;/HSI>
 &lt;DISPLAY_AMOUNT>1.00 oz&lt;/DISPLAY_AMOUNT>
 &lt;INVENTORY>1.00 oz&lt;/INVENTORY>
 &lt;DISPLAY_TIME>60 min&lt;/DISPLAY_TIME>
&lt;/HOP>
&lt;/RECIPE>
&lt;/RECIPES>
</pre>
  </xml>

</p>
<p>
  Further research revealed that people have developed ruby gems (code libraries) in
  order to parse and explore BeerXML documents more easily. I decided to check out
  the gem <a href="https://github.com/codekitchen/beerxml">beerxml</a> first. I installed
  it on my system simply by using the 'gem install beerxml' command.
</p>
<p>
  Much to my surprise, the README file (the documentation) was quite sparse and directed
  me to read the rspece tests for the gem. (Located <a href="https://github.com/codekitchen/beerxml/tree/master/spec">here</a>.)
  Luckily, I'm learning rspec at Ada, so following tests as documentation is not that
  scary to me right now! In fact, rspec is often so expressive it can be fairly obvious
  what features are meant to do and how to utilize them.
</p>
<p>
  For example, the Units features in the Beerxml gem are pretty nifty. The rspec file
  contains the following tests:
  <code>
    <pre>
class Float
  def near?(rhs, prec = 0.01)
    self.between?(rhs - prec, rhs + prec)
  end
end

describe "equality" do
  it "should compare between units" do
    w = U(3.5, 'kg')
    lbs = w.in('pounds')
    lbs.to_f.should be_near(7.7162)
    w.should == lbs
    w.should == 3.5
    w.in('lbs').should == 7.716
  end
end

describe "changing units with in()" do
  it "should handle basic conversions" do
    w = U(1.53, 'kg')
    w.in('grams').should == 1530
    w.in('lbs').to_f.should be_near(3.37)
    w.in('lbs').in('ounces').to_f.should be_near(53.97)
    w.in('pounds').in('grams').in('kg').to_f.should be_near(1.53)
  end
end
</code>
</pre>
<p>
  Small, but awesome - it looks like this is meant so that I can define an amount
  of something in whatever units I desire and be able to quickly and expressively
  switch between units. I tested it out in irb a little bit and it works as described.
  I assume that near? function monkeypatched to float at the top of the rspec was
  created to allow for things like <code>lbs.to_f.should be_near(7.7162)</code>.
</p>
<p>
  Further exploring has revealed that there are some bugs in this gem. Perhaps it
  has something to do with the fact that the last update happened in 2011? Fear not!
  If all else fails, I will forge my own path to reading and writing beerxml files using ruby.
</p>
